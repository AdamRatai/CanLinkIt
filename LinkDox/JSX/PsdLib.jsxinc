/*********************************************

Copyright 2012 Aaron Powers
All Rights Reserved
*/

#target photoshop

/************************************************************************************************************
General Photoshop Helper Functions
    **/

function PsdLib() {
}

/*//////////////////////////////////////////////////////////////////////////////
// Function: getSmartlayerFilename
// Description: Checks the activeLayer for placed fileName 
//                   
// Input: 
// Return: String- "-1" if name not found
//////////////////////////////////////////////////////////////////////////////*/
function getSmartlayerFilename(){
	try {// cleaned up scriptlistner output
		var ref = new ActionReference(); 
		ref.putEnumerated( 1283027488, 1332896878, 1416783732 ); 
		var smartDesc = executeActionGet
		(ref).getObjectValue(stringIDToTypeID( "smartObject" )) 
		return smartDesc.getString( 1181314130 );
	} catch (e) { return "-1"; }   
}


/*///////////////////////////////////////////////////////////////////////////////////////////
// Function: getSelectedLayersCount
// Description: gets the number of selected layers  
// Usage: 
// Input:
// Return: Number
// Dependencies:
// Notes: retruns 1 if no layer selected DOM bug?			 
//////////////////////////////////////////////////////////////////////////////*/
function getSelectedLayersCount(){
	var res = new Number();
	var ref = new ActionReference();
	ref.putEnumerated( charIDToTypeID("Dcmn"), charIDToTypeID("Ordn"), charIDToTypeID("Trgt") );
	var desc = executeActionGet(ref);
	if( desc.hasKey( stringIDToTypeID( 'targetLayers' ) ) ){
		desc = desc.getList( stringIDToTypeID( 'targetLayers' ));
		res = desc.count 
	}else{
		try{
			// how to tell if no layer is selected?
			// this returns the top layer if no layer selected
			 app.activeDocument.activeLayer.name;
			res = 1;
		}catch(e){
			res = 0;
		}	
	}
	return res;
}



/**********************************
	* PsdLib.isLinkableFromFile(fileName)
	* Pass in a file name and it will return:
	*   true: if the file format supports linking, e.g. PSD & PSD
	*   false: if the file format is anything else
	*/
PsdLib.isLinkableFromFile = function(fileName) {
	// Regexp is case sensitive, so to make this easier, we lowercase it.
	fileName= fileName.toLowerCase();
	return fileName.match(/.+\.psd$/) || fileName.match(/.+\.psb$/) ;
}

/**********************************
	* PsdLib.isMultiLayer(fileName)
	* Pass in a file name and it will return:
	*   true: if the file format supports multiple layers, e.g. PSD
	*   false: if the file format supports only one layer, it's already flattened: e.g. png
	*   null: if we don't know what format it is.
	*/
PsdLib.isMultiLayer = function(fileName) {
	// Regexp is case sensitive, so to make this easier, we lowercase it.
	fileName= fileName.toLowerCase();

	// Note: A bunch of these file formats I'm not really sure whethery they have layers in them or not.
	// FUTURE TODO: I should go through these and verify they belong where they are
	if (fileName.match(/.+\.ai$/) 
		|| fileName.match(/.+\.psd$/) 
		|| fileName.match(/.+\.psb$/) 
		|| fileName.match(/.+\.pdd$/) 
		|| fileName.match(/.+\.eps$/) 
		|| fileName.match(/.+\.ai3$/) 
		|| fileName.match(/.+\.ai4$/) 
		|| fileName.match(/.+\.ai5$/) 
		|| fileName.match(/.+\.ai6$/) 
		|| fileName.match(/.+\.ai7$/) 
		|| fileName.match(/.+\.ai8$/) 
		// The following I'm not really sure as to whether they open as single layer or multi layer:
		|| fileName.match(/.+\.ps$/) 
		|| fileName.match(/.+\.epsf$/) 
		|| fileName.match(/.+\.epsp$/) 
		|| fileName.match(/.+\.pdf$/) 
		|| fileName.match(/.+\.pdp$/)
		) {
		return true;
	}

	if (fileName.match(/.+\.png$/) 
		|| fileName.match(/.+\.jpg$/) 
		|| fileName.match(/.+\.jpeg$/)
		|| fileName.match(/.+\.jpe$/) 
		|| fileName.match(/.+\.jpf$/) 
		|| fileName.match(/.+\.jpx$/) 
		|| fileName.match(/.+\.jp2$/) 
		|| fileName.match(/.+\.j2c$/) 
		|| fileName.match(/.+\.j2k$/) 
		|| fileName.match(/.+\.jpc$/) 
		|| fileName.match(/.+\.gif$/) 
		|| fileName.match(/.+\.bmp$/) 
		|| fileName.match(/.+\.rle$/) 
		|| fileName.match(/.+\.dib$/) 
		|| fileName.match(/.+\.tif$/) 
		|| fileName.match(/.+\.tiff$/) 
		|| fileName.match(/.+\.pct$/) 
		|| fileName.match(/.+\.pict$/) 
		|| fileName.match(/.+\.pbm$/) 
		|| fileName.match(/.+\.pgm$/) 
		|| fileName.match(/.+\.ppm$/) 
		|| fileName.match(/.+\.pnm$/) 
		|| fileName.match(/.+\.pfm$/) 
		|| fileName.match(/.+\.pam$/) 
		// The following I'm not really sure as to whether they open as single layer or multi layer:
		|| fileName.match(/.+\.crw$/) 
		|| fileName.match(/.+\.nef$/) 
		|| fileName.match(/.+\.raf$/) 
		|| fileName.match(/.+\.orf$/) 
		|| fileName.match(/.+\.mrw$/) 
		|| fileName.match(/.+\.dcr$/) 
		|| fileName.match(/.+\.mos$/) 
		|| fileName.match(/.+\.raw$/) 
		|| fileName.match(/.+\.pef$/) 
		|| fileName.match(/.+\.srf$/) 
		|| fileName.match(/.+\.dng$/) 
		|| fileName.match(/.+\.dng$/) 
		|| fileName.match(/.+\.x3f$/) 
		|| fileName.match(/.+\.cr2$/) 
		|| fileName.match(/.+\.erf$/) 
		|| fileName.match(/.+\.sr2$/) 
		|| fileName.match(/.+\.kdc$/) 
		|| fileName.match(/.+\.mfw$/) 
		|| fileName.match(/.+\.mef$/) 
		|| fileName.match(/.+\.arw$/) 
		|| fileName.match(/.+\.nwr$/) 
		|| fileName.match(/.+\.rw2$/) 
		|| fileName.match(/.+\.rwl$/) 
		|| fileName.match(/.+\.iiq$/) 
		|| fileName.match(/.+\.3fr$/) 
		|| fileName.match(/.+\.cin$/) 
		|| fileName.match(/.+\.sdpx$/) 
		|| fileName.match(/.+\.dpx$/) 
		|| fileName.match(/.+\.fido$/) 
		|| fileName.match(/.+\.iff$/) 
		|| fileName.match(/.+\.tdi$/) 
		|| fileName.match(/.+\.exr$/) 
		|| fileName.match(/.+\.pcx$/) 
		|| fileName.match(/.+\.pxr$/) 
		|| fileName.match(/.+\.hdr$/) 
		|| fileName.match(/.+\.rgbe$/) 
		|| fileName.match(/.+\.xyze$/) 
		|| fileName.match(/.+\.sct$/) 
		|| fileName.match(/.+\.tga$/) 
		|| fileName.match(/.+\.vda$/) 
		|| fileName.match(/.+\.icb$/) 
		|| fileName.match(/.+\.vst$/) 
		|| fileName.match(/.+\.wbm$/) 
		|| fileName.match(/.+\.wbmp$/) 
		) {
		return false;
	}
	return null;
}

/**************************************
	* findPhotoshopEventIDs
	* Description: gets runtime integers for stringIDs for use in Flex  eventhandlers  
	* Returns: XML
	*/
function findPhotoshopEventIDs(){
	var xml = "<object>";
	xml += convertToXML( stringIDToTypeID( "newPlacedLayer" ).toString(), "newPlacedLayer" );// convert	
	xml += convertToXML( stringIDToTypeID( "placedLayerEditContents" ).toString(), "placedLayerEditContents" ); // user has edited a placed layer
	xml += convertToXML( stringIDToTypeID( "placedLayerReplaceContents" ).toString() , "placedLayerReplaceContents" );
	xml += convertToXML( stringIDToTypeID( "placedLayerMakeCopy" ).toString(), "placedLayerMakeCopy" );// new via copy
	xml += "</object>";
	return xml;
}

function getVersion() {
	var xml = "<object>";
	xml += convertToXML(app.version, "version");
	xml += "</object>"
	return xml;
}

/******************************
	* getSelectedLayersIndex()
	* Returns an array of selected indexes.
	* Credits to Mike Hale for coming up with this. It's posted on his PS-scripts board: http://www.ps-scripts.com/bb/viewtopic.php?f=13&t=2841
	*/
PsdLib.prototype.getSelectedLayersIndex = function() {
	var selectedLayers = new Array;
	var ref = new ActionReference();
	ref.putEnumerated( charIDToTypeID("Dcmn"), charIDToTypeID("Ordn"), charIDToTypeID("Trgt") );
	var desc = executeActionGet(ref);
	if( desc.hasKey( stringIDToTypeID( 'targetLayers' ) ) ){
		desc = desc.getList( stringIDToTypeID( 'targetLayers' ));
		var c = desc.count 
		var selectedLayers = new Array();
		for(var i=0;i<c;i++){
			try{ 
				activeDocument.backgroundLayer;
				selectedLayers.push(  desc.getReference( i ).getIndex() );
			} catch(e) {
				selectedLayers.push(  desc.getReference( i ).getIndex()+1 );
			}
		}
	} else {
		var ref = new ActionReference(); 
		ref.putProperty( charIDToTypeID("Prpr") , charIDToTypeID( "ItmI" )); 
         ref.putEnumerated( charIDToTypeID("Lyr "), charIDToTypeID("Ordn"), charIDToTypeID("Trgt") );
         try { 
			activeDocument.backgroundLayer;
			selectedLayers.push( executeActionGet(ref).getInteger(charIDToTypeID( "ItmI" ))-1);
         }catch(e){
			selectedLayers.push( executeActionGet(ref).getInteger(charIDToTypeID( "ItmI" )));
         }
      }
      return selectedLayers;
}

// Credits to Mike Hale for coming up with this. It's posted on his PS-scripts board.
PsdLib.prototype.makeActiveByIndex = function(index, forceVisible) {
	try {
		var desc = new ActionDescriptor();
		var ref = new ActionReference();
		ref.putIndex(charIDToTypeID( "Lyr " ), index)
		desc.putReference( charIDToTypeID( "null" ), ref );
		desc.putBoolean( charIDToTypeID( "MkVs" ), forceVisible );
		executeAction( charIDToTypeID( "slct" ), desc, DialogModes.NO );
	} catch(e) {
		logIt("PsdLib.makeActiveByIndex: index="+index+", could not make active due to Error:"+e.toString());
		return -1;
	}
};

PsdLib.prototype.getNumberOfLayers = function() {
	// Ask photoshop how many layers there are in the document:
	var ref = new ActionReference(); 
	ref.putEnumerated( charIDToTypeID("Dcmn"), charIDToTypeID("Ordn"), charIDToTypeID("Trgt") ); 
	var desc = executeActionGet(ref);
	return desc.getInteger(charIDToTypeID("NmbL")); 
}

PsdLib.prototype.isValidActiveLayer = function(index) {
	try {
		var propName = stringIDToTypeID( 'layerSection' );// can't replace
		var ref = new ActionReference(); 
		ref.putProperty( 1349677170 , propName);// TypeID for "Prpr"
		// 'Lyr ", index
		ref.putIndex( 1283027488, index );
		var desc =  executeActionGet( ref );
		var type = desc.getEnumerationValue( propName );
		var res = typeIDToStringID( type ); 
		return res == 'layerSectionEnd' ? false:true;
	} catch (e) {
		// The one time I got this during production (just now), it was my Empty.psd file that has only one layer -- a background layer which wasn't a valid target.
		logIt("PsdLib.isValidActiveLayer: got an exception when trying to check, so we'll say it's not a valid layer.");
		return false;
	}
};


PsdLib.isDocumentStillOpen = function(docRef) {
	try {
		docRef.layers;
		return true;
	} catch (e) {
		// If it's closed, it would through a "ReferenceError: Object is invalid" at the above line. If you want to see it in the JavaScript console, uncomment the following line.
		//$.writeln("e="+e);
		return false;
	}
}


/***************
	* This function doesn't work yet. It needs to include some sort of trimming.
	* Get the true pixel width and height of a layer. This is harder than it sounds because the bounds property doesn't have the true width or height in pixels.
	* 
	*/
/*PsdLib.getLayerTrueSize = function() {
	var startRulerUnits = app.preferences.rulerUnits;
	app.preferences.rulerUnits = Units.PIXELS;	
	
	var idMk = charIDToTypeID( "Mk  " );
    var desc203 = new ActionDescriptor();
    var idnull = charIDToTypeID( "null" );
        var ref102 = new ActionReference();
        var idDcmn = charIDToTypeID( "Dcmn" );
        ref102.putClass( idDcmn );
    desc203.putReference( idnull, ref102 );
    var idUsng = charIDToTypeID( "Usng" );
        var ref103 = new ActionReference();
        var idLyr = charIDToTypeID( "Lyr " );
        var idOrdn = charIDToTypeID( "Ordn" );
        var idTrgt = charIDToTypeID( "Trgt" );
        ref103.putEnumerated( idLyr, idOrdn, idTrgt );
    desc203.putReference( idUsng, ref103 );
    var idVrsn = charIDToTypeID( "Vrsn" );
    desc203.putInteger( idVrsn, 5 );
	executeAction( idMk, desc203, DialogModes.NO );
	
	var size=[app.activeDocument.width, app.activeDocument.height];
	
	app.activeDocument.close(SaveOptions.DONOTSAVECHANGES);
	
	app.preferences.rulerUnits = startRulerUnits;
	return size;
}*/


/***************
	* TODO this method has major weaknesses. I'm hoping we can find something better.
	*
	*/
PsdLib.resizeLayer = function(targetWidth,targetHeight) {

	
	/**Restore the size
			This iterative method, thought commented below like it works, doesn't work either.
			
			For some reason, Photoshop's resize method doesn't actually work off the percentage you'd expect. I'm not quite sure what's going wrong with this...
			However, there is this awkward workaround.
			So I had to do two things to make this work:
			(1) When resizing, we don't rescale exactly to the % you'd expect to scale to.
			(2) I use iterations -- so if it's off by a pixel due to a rounding error, it will rescale again until it's perfect or we give up after 9 tries.
			
			I've managed to get it down to work in 1 iteration on most of my tests.
			However, in at least one test left, SmallSizeLinkedToLoremIpsum.psd it still takes 8 iterations. So this is still necessary.
			In those iterations, the first scall down doesn't scale down far enough (by 1 pixel), the next scales down too far, and the rest scale up not enough. Yuck.
			*/

		for (var i=0; i<9; i++) {
			logIt("\PsdLib.resizeLayer: count="+i+":");
			var newBounds = PsdLib.getLayerBounds();
			/*var newX=app.activeDocument.activeLayer.bounds[0].as("pixels");
			var newY=app.activeDocument.activeLayer.bounds[1].as("pixels");
			var newXRight = app.activeDocument.activeLayer.bounds[2].as("pixels");
			var newYBottom=app.activeDocument.activeLayer.bounds[3].as("pixels");
			logIt("\t\tLine 10");
			var newWidth=newXBottom-newX;
			var newHeight=newYBottom-newY;
			logIt("\t\tLine 20");*/
			if (targetWidth==newBounds.width && targetHeight==newBounds.height) {
				// don't do any resizing.
				logIt("\t\tdone resizing. width="+newBounds.width+", height="+newBounds.height);
				//alert("count="+i+": done resizing.");
				return;
			}
			if (newBounds.width==0||newBounds.height==0) {
				// This is an indication that the layer.resize failed. So, undo the last change:
				docRef.activeHistoryState = docRef.historyStates[docRef.historyStates.length-2];
				// Then return and don't do any more resizing:
				return;
			}
		
			var rescaleWidth=100;//(targetWidth/newBounds.width)*100;
			var rescaleHeight=100;//(targetHeight/newBounds.height)*100;
			logIt("\t\tLine 30");
			// When we do nothing in the next block, it would suceed at count=8. But we can do better.
			// When I set it to divide by 1.66666666666 below if it's greater, then it works in only one iteration.
			/*if (targetWidth==newBounds.width)
				rescaleWidth=100;
			else if (targetWidth<newBounds.width)
				rescaleWidth=rescaleWidth/1.66666666666;
			else /*if targetWidth>newBounds.width*/
				rescaleWidth=(targetWidth/newBounds.width)*100;

			/*if (targetHeight==newBounds.height)
				rescaleHeight=100;
			else if (targetHeight<newBounds.height)
				rescaleHeight=rescaleHeight/1.66666666666;
			else /*if targetHeight>newBounds.height*/
				rescaleHeight=(targetHeight/newBounds.height)*100;
				
			logIt("\t\twidth="+newBounds.width+" (target="+targetWidth+")\n"+
				"\t\t\theight="+newBounds.height+" (target="+targetHeight+")\n"+
				"\t\t\t... so.... \n"+
				"\t\t\trescaleWidth="+rescaleWidth+"\n"+
				"\t\t\trescaleHeight="+rescaleHeight);
			logIt("\t\tLine 99");
			app.activeDocument.activeLayer.resize(rescaleWidth, rescaleHeight, AnchorPosition.MIDDLECENTER);
			
			
			var afterResizeBounds = PsdLib.getLayerBounds();
			/* In some cases, e.g. with tested layer comps, this rescaling actually sends sizes in the opposite direction it should go.
				If that's the case, we need to detect it, undo the change, and stop iterating, even if it means leaving this at an imperfect size.
				*/
			if (targetWidth>newBounds.width && afterResizeBounds.width<newBounds.width
					// Above: Width should be growing. But width shrunk.
				|| targetWidth<newBounds.width && afterResizeBounds.width>newBounds.width
					// Above: Width should be shrinking. But width grew.
				|| targetHeight>newBounds.height && afterResizeBounds.height<newBounds.height
					// Above: Height should be growing. But height shrunk.
				|| targetHeight<newBounds.height && afterResizeBounds.height>newBounds.height
					// Above: Height should be shrinking. But height grew.
				) {
				// These are all the indications that the layer.resize is failing. So, undo the last change:
				app.activeDocument.activeHistoryState = app.activeDocument.historyStates[app.activeDocument.historyStates.length-2];
				// Then return and don't do any more resizing:
				return;
			}
			logIt("\t\tLine 100");
		}
}
	

/*************
	* The Photoshop ArtLayer.resize call does not work on smart objects -- it can resize in arbitrary ways. 
	* To see how, try out Scratch_TestResizeIssue.jsx and try the commented out versions of resize... They all fail in various interesting ways.
	* 
	* This method works by copying the layer into a new file, resizing that file, and then copying it back. It turned out to be the only way.
	*/
PsdLib.resizeLayerByCopyingIntoNewDocument = function(targetWidth,targetHeight) {
	
	
	// Save info we'll need
	var originalDocName = app.activeDocument.name;
	var originalLayer = app.activeDocument.activeLayer;
	
	


	// =======================================================
	// Duplicate layer to new document
	var idMk = charIDToTypeID( "Mk  " );
    var desc203 = new ActionDescriptor();
    var idnull = charIDToTypeID( "null" );
        var ref102 = new ActionReference();
        var idDcmn = charIDToTypeID( "Dcmn" );
        ref102.putClass( idDcmn );
    desc203.putReference( idnull, ref102 );
    var idUsng = charIDToTypeID( "Usng" );
        var ref103 = new ActionReference();
        var idLyr = charIDToTypeID( "Lyr " );
        var idOrdn = charIDToTypeID( "Ordn" );
        var idTrgt = charIDToTypeID( "Trgt" );
        ref103.putEnumerated( idLyr, idOrdn, idTrgt );
    desc203.putReference( idUsng, ref103 );
    var idVrsn = charIDToTypeID( "Vrsn" );
    desc203.putInteger( idVrsn, 5 );
	executeAction( idMk, desc203, DialogModes.NO );

	app.activeDocument.resizeImage(targetWidth,targetHeight);


	// =======================================================
	// Copy it back: notice the layer and file names below.
	var idDplc = charIDToTypeID( "Dplc" );
    var desc208 = new ActionDescriptor();
    var idnull = charIDToTypeID( "null" );
        var ref108 = new ActionReference();
        var idLyr = charIDToTypeID( "Lyr " );
        var idOrdn = charIDToTypeID( "Ordn" );
        var idTrgt = charIDToTypeID( "Trgt" );
        ref108.putEnumerated( idLyr, idOrdn, idTrgt );
    desc208.putReference( idnull, ref108 );
    var idT = charIDToTypeID( "T   " );
        var ref109 = new ActionReference();
        var idDcmn = charIDToTypeID( "Dcmn" );
        ref109.putName( idDcmn, originalDocName );
    desc208.putReference( idT, ref109 );
    var idNm = charIDToTypeID( "Nm  " );
    desc208.putString( idNm, app.activeDocument.activeLayer.name );
    var idVrsn = charIDToTypeID( "Vrsn" );
    desc208.putInteger( idVrsn, 5 );
	executeAction( idDplc, desc208, DialogModes.NO );


	// Close duplicated document:
	app.activeDocument.close(SaveOptions.DONOTSAVECHANGES);
	originalLayer.remove();

}

PsdLib.getLayerBounds = function() {
	var bounds = new Object();
	bounds.left=app.activeDocument.activeLayer.bounds[0].as("pixels");
	bounds.top=app.activeDocument.activeLayer.bounds[1].as("pixels");
	bounds.right=app.activeDocument.activeLayer.bounds[2].as("pixels");
	bounds.bottom=app.activeDocument.activeLayer.bounds[3].as("pixels");
	bounds.width=bounds.right-bounds.left;
	bounds.height=bounds.bottom-bounds.top;
	return bounds;
}

/*********
	*
	* Assumes that a smart object is currently selected as the activeLayer.
	*/
PsdLib.getSmartObjectInternalSize = function() {
	// =======================================================
	var idplacedLayerEditContents = stringIDToTypeID( "placedLayerEditContents" );
    var desc17 = new ActionDescriptor();
	executeAction( idplacedLayerEditContents, desc17, DialogModes.NO );
	
	var size=new Object();
	size.width=app.activeDocument.width.as("pixels");
	size.height=app.activeDocument.height.as("pixels");
	
	app.activeDocument.close(SaveOptions.DONOTSAVECHANGES);
	return size;
}


PsdLib.getLargerNumberOf = function(num1, num2) {
	if (num1>num2)
		return num1;
	return num2;
}

PsdLib.getSmallerNumberOf = function(num1, num2) {
	if (num1<num2)
		return num1;
	return num2;
}

/***********************************
* Get bounds of a set of layers
* Warning: This appears to be ignoring effects on the bounds we're getting. Which means that if there are special layers with effects, we need to find some way to flatten first.
*/
PsdLib.getBoundsOfTheseLayers = function(layersToSearch) {
	//var originalActiveLayer=activeDocument.activeLayer;
	var bounds = new Object();
	bounds.left=null;
	bounds.right=null;
	bounds.top=null;
	bounds.bottom=null;
	
	for (var i=0; i<layersToSearch.length; i++) {
		// next variable is for debugging use only:
		if (!layersToSearch[i].visible)
			continue; // it's invisible, so it doesn't count towards the bounds.
		var layerName=layersToSearch[i].name;
		//activeDocument.activeLayer=layersToSearch[i];
		if (bounds.left==null) {
			bounds.left=layersToSearch[i].bounds[0].as("pixels");
			bounds.top=layersToSearch[i].bounds[1].as("pixels");
			bounds.right=layersToSearch[i].bounds[2].as("pixels");
			bounds.bottom=layersToSearch[i].bounds[3].as("pixels");
			continue;
		}
		
		bounds.left=PsdLib.getSmallerNumberOf(bounds.left,layersToSearch[i].bounds[0].as("pixels"));
		bounds.top=PsdLib.getSmallerNumberOf(bounds.top,layersToSearch[i].bounds[1].as("pixels"));
		bounds.right=PsdLib.getLargerNumberOf(bounds.right,layersToSearch[i].bounds[2].as("pixels"));
		bounds.bottom=PsdLib.getLargerNumberOf(bounds.bottom,layersToSearch[i].bounds[3].as("pixels"));
	}

	// We can get bounds that are bigger than the size of the document. This is unfortunate since it's not true once trimmed to the document (the way we're using it).
	// So, limit the size the the size of the document.
	if (bounds.left<0)
		bounds.left=0;
	if (bounds.top<0)
		bounds.top=0;
	if (bounds.bottom>activeDocument.height.as("pixels"))
		bounds.bottom=activeDocument.height.as("pixels");
	if (bounds.right>activeDocument.width.as("pixels"))
		bounds.right=activeDocument.width.as("pixels");

	bounds.width=bounds.right-bounds.left;
	bounds.height=bounds.bottom-bounds.top;
	
	// Reset to the original active layer.
	//activeDocument.activeLayer=originalActiveLayer;
	return bounds;
}

PsdLib.getBoundsOfAllLayers = function() {
	var wasMerged=false;
	// Merge visible layers so that it will rasterize all effects all in one go. (Rasterize would have to be applied and undone to every single layer, whereas flatten includes invisible layers like the background).
	if (activeDocument.layers.length>1) {
		activeDocument.mergeVisibleLayers();
		 wasMerged=true;
	}
	var bounds= PsdLib.getBoundsOfTheseLayers(activeDocument.layers);

	// Undo that merge of visible layers from above.
	if (wasMerged)
		app.activeDocument.activeHistoryState = app.activeDocument.historyStates[app.activeDocument.historyStates.length-2];
	
	return bounds;
}

/*********
	*
	* Assumes that a smart object is currently selected as the activeLayer.
	*/
PsdLib.getSmartObjectInternalBounds = function() {
	// We can't ask the user whether they want to edit the original when we make this action happen! So we turn that off:
	debug_EditedSOHelper_autoAnswerOpenSO=false;
	
	
	// =======================================================
	var idplacedLayerEditContents = stringIDToTypeID( "placedLayerEditContents" );
    var desc17 = new ActionDescriptor();
	executeAction( idplacedLayerEditContents, desc17, DialogModes.NO );
	
	var bounds = PsdLib.getBoundsOfAllLayers();
	bounds.docWidth=app.activeDocument.width.as("pixels");
	bounds.docHeight=app.activeDocument.height.as("pixels");
	
	app.activeDocument.close(SaveOptions.DONOTSAVECHANGES);
	debug_EditedSOHelper_autoAnswerOpenSO=null;
	return bounds;
}